#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('infodealdemo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

const fs = require('fs');


/**
 * Listen on provided port, on all network interfaces.
 */
var watch = require('node-watch');

const dirPath = './public/';
const dirPathViews = './views/';
// 静态资源的变化监控
var watchStatus = false;
// views文件的监控
var watchStatusViews = false;

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.set('log level', 1);
io.sockets.on('connection', function(socket) {
    //new user login
    socket.on('login', function() {
        console.log('login');
        if (!watchStatus && fs.statSync(dirPath).isDirectory()) {
          watch(dirPath, { recursive: true } , function(data , s) {
            if(data == 'update'){
              console.log(s + '文件改变');
              io.sockets.emit('refreshs');
            }
          });
          watchStatus = true;
        }

        if(!watchStatusViews && fs.statSync(dirPathViews).isDirectory()){
          watch(dirPathViews, { recursive: true } , function(data , s) {
            if(data == 'update'){
              console.log(s + '文件改变');
              io.sockets.emit('refreshs');
            }
          });
          watchStatusViews = true;
        }
    });
    socket.on('disconnect', function() {
        console.log('disconnect');
        // window.location.reload();
    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
